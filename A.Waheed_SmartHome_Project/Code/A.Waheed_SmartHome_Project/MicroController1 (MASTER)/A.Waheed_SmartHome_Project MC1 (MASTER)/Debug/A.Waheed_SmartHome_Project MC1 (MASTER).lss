
A.Waheed_SmartHome_Project MC1 (MASTER).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000746  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00000746  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e43  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7d  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e13  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002dc  00000000  00000000  00004304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d3  00000000  00000000  000045e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ccf  00000000  00000000  00004db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00005a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  7a:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Bluetooth_Init>:
  82:	0e 94 89 03 	call	0x712	; 0x712 <UART_Init>
  86:	08 95       	ret

00000088 <Bluetooth_Receive>:
  88:	0e 94 9d 03 	call	0x73a	; 0x73a <UART_ReceiveByte>
  8c:	08 95       	ret

0000008e <LCD_WriteCommand>:
  8e:	cf 93       	push	r28
  90:	c8 2f       	mov	r28, r24
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	9c 2f       	mov	r25, r28
  b6:	90 7f       	andi	r25, 0xF0	; 240
  b8:	89 2b       	or	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	63 e0       	ldi	r22, 0x03	; 3
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_WriteCommand+0x3c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_WriteCommand+0x42>
  d0:	00 00       	nop
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	28 2f       	mov	r18, r24
  e0:	2f 70       	andi	r18, 0x0F	; 15
  e2:	30 e1       	ldi	r19, 0x10	; 16
  e4:	c3 9f       	mul	r28, r19
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	82 2b       	or	r24, r18
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
  f8:	8f ec       	ldi	r24, 0xCF	; 207
  fa:	97 e0       	ldi	r25, 0x07	; 7
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_WriteCommand+0x6e>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_WriteCommand+0x74>
 102:	00 00       	nop
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	97 e2       	ldi	r25, 0x27	; 39
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_WriteCommand+0x84>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_WriteCommand+0x8a>
 118:	00 00       	nop
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <LCD_Init>:
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	64 e0       	ldi	r22, 0x04	; 4
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	65 e0       	ldi	r22, 0x05	; 5
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	66 e0       	ldi	r22, 0x06	; 6
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	67 e0       	ldi	r22, 0x07	; 7
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	80 e7       	ldi	r24, 0x70	; 112
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <LCD_Init+0x4c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Init+0x56>
 174:	00 00       	nop
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 1a0:	08 95       	ret

000001a2 <LCD_WriteData>:
 1a2:	cf 93       	push	r28
 1a4:	c8 2f       	mov	r28, r24
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 1c4:	8b b3       	in	r24, 0x1b	; 27
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	9c 2f       	mov	r25, r28
 1ca:	90 7f       	andi	r25, 0xF0	; 240
 1cc:	89 2b       	or	r24, r25
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 1da:	8f ec       	ldi	r24, 0xCF	; 207
 1dc:	97 e0       	ldi	r25, 0x07	; 7
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_WriteData+0x3c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_WriteData+0x42>
 1e4:	00 00       	nop
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 1f0:	8b b3       	in	r24, 0x1b	; 27
 1f2:	28 2f       	mov	r18, r24
 1f4:	2f 70       	andi	r18, 0x0F	; 15
 1f6:	30 e1       	ldi	r19, 0x10	; 16
 1f8:	c3 9f       	mul	r28, r19
 1fa:	c0 01       	movw	r24, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	82 2b       	or	r24, r18
 200:	8b bb       	out	0x1b, r24	; 27
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 20c:	8f ec       	ldi	r24, 0xCF	; 207
 20e:	97 e0       	ldi	r25, 0x07	; 7
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_WriteData+0x6e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_WriteData+0x74>
 216:	00 00       	nop
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	97 e2       	ldi	r25, 0x27	; 39
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_WriteData+0x84>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_WriteData+0x8a>
 22c:	00 00       	nop
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCD_GoTo>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <LCD_GoTo+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	90 e8       	ldi	r25, 0x80	; 128
 23e:	99 83       	std	Y+1, r25	; 0x01
 240:	90 ec       	ldi	r25, 0xC0	; 192
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	fe 01       	movw	r30, r28
 246:	e8 0f       	add	r30, r24
 248:	f1 1d       	adc	r31, r1
 24a:	81 81       	ldd	r24, Z+1	; 0x01
 24c:	86 0f       	add	r24, r22
 24e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <LCD_WriteString>:
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	59 f0       	breq	.+22     	; 0x280 <LCD_WriteString+0x24>
 26a:	8f 01       	movw	r16, r30
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WriteData>
 272:	cf 5f       	subi	r28, 0xFF	; 255
 274:	f8 01       	movw	r30, r16
 276:	ec 0f       	add	r30, r28
 278:	f1 1d       	adc	r31, r1
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <LCD_WriteString+0x12>
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <LCD_Clear>:
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Clear+0xa>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Clear+0x10>
 298:	00 00       	nop
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
 2a0:	08 95       	ret

000002a2 <Waheed_Welcome_MSG>:
#define DOOR_CLOSE			 '8'

void Waheed_Welcome_MSG ()
{
	
	LCD_WriteString((uint8*)"** Welcome To **");
 2a2:	80 e6       	ldi	r24, 0x60	; 96
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	89 e6       	ldi	r24, 0x69	; 105
 2ae:	98 e1       	ldi	r25, 0x18	; 24
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <Waheed_Welcome_MSG+0xe>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <Waheed_Welcome_MSG+0x18>
 2ba:	00 00       	nop
	_delay_ms(1000);
	LCD_WriteCommand(0xC0);		// Go to 2nd line
 2bc:	80 ec       	ldi	r24, 0xC0	; 192
 2be:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
	LCD_WriteString((uint8*)"* My_SmartHome *");
 2c2:	81 e7       	ldi	r24, 0x71	; 113
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	8d e3       	ldi	r24, 0x3D	; 61
 2ce:	99 e4       	ldi	r25, 0x49	; 73
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <Waheed_Welcome_MSG+0x2e>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <Waheed_Welcome_MSG+0x38>
 2da:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 2dc:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
	LCD_WriteString((uint8*)"   Enter  Your  ");
 2e0:	82 e8       	ldi	r24, 0x82	; 130
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
	LCD_WriteCommand(0xC0);
 2e8:	80 ec       	ldi	r24, 0xC0	; 192
 2ea:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
	LCD_WriteString((uint8*)"  Choice  (^_^) ");
 2ee:	83 e9       	ldi	r24, 0x93	; 147
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	8d e3       	ldi	r24, 0x3D	; 61
 2fa:	99 e4       	ldi	r25, 0x49	; 73
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <Waheed_Welcome_MSG+0x5a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <Waheed_Welcome_MSG+0x64>
 306:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 308:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
	LCD_GoTo(0,0);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
	LCD_WriteString((uint8*)"'1':LED_TURN_ON ");
 314:	84 ea       	ldi	r24, 0xA4	; 164
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
	LCD_WriteCommand(0xC0);
 31c:	80 ec       	ldi	r24, 0xC0	; 192
 31e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
	LCD_WriteString((uint8*)"'2':LED_TURN_Off");
 322:	85 eb       	ldi	r24, 0xB5	; 181
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	8d e3       	ldi	r24, 0x3D	; 61
 32e:	99 e4       	ldi	r25, 0x49	; 73
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <Waheed_Welcome_MSG+0x8e>
 338:	00 c0       	rjmp	.+0      	; 0x33a <Waheed_Welcome_MSG+0x98>
 33a:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 33c:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
	LCD_GoTo(0,0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
	LCD_WriteString((uint8*)"'4':TV_TURN_ON ");
 348:	86 ec       	ldi	r24, 0xC6	; 198
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
	LCD_WriteCommand(0xC0);
 350:	80 ec       	ldi	r24, 0xC0	; 192
 352:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
	LCD_WriteString((uint8*)"'5':TV_TURN_Off");
 356:	86 ed       	ldi	r24, 0xD6	; 214
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	8d e3       	ldi	r24, 0x3D	; 61
 362:	99 e4       	ldi	r25, 0x49	; 73
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <Waheed_Welcome_MSG+0xc2>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <Waheed_Welcome_MSG+0xcc>
 36e:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 370:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
	LCD_GoTo(0,0);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
	LCD_WriteString((uint8*)"'7':Door_Open ");
 37c:	86 ee       	ldi	r24, 0xE6	; 230
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
	LCD_WriteCommand(0xC0);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_WriteCommand>
	LCD_WriteString((uint8*)"'8':Door_Close");
 38a:	85 ef       	ldi	r24, 0xF5	; 245
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	8d e3       	ldi	r24, 0x3D	; 61
 396:	99 e4       	ldi	r25, 0x49	; 73
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <Waheed_Welcome_MSG+0xf6>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <Waheed_Welcome_MSG+0x100>
 3a2:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 3a4:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
 3a8:	08 95       	ret

000003aa <main>:
#include "MCAL/SPI/SPI.h"
		

int main(void)
{
	LCD_Init();
 3aa:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Init>
	SPI_Master_Init();
 3ae:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_Master_Init>
	Bluetooth_Init();
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <Bluetooth_Init>
	SPI_InitTrans();
 3b6:	0e 94 83 03 	call	0x706	; 0x706 <SPI_InitTrans>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	89 e6       	ldi	r24, 0x69	; 105
 3be:	98 e1       	ldi	r25, 0x18	; 24
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x16>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x20>
 3ca:	00 00       	nop
	_delay_ms(1000);
	Waheed_Welcome_MSG ();
 3cc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Waheed_Welcome_MSG>
	
		while (1)
		{	
		
		//Read the bluetooth received message from mobile phone
		messageID = Bluetooth_Receive();
 3d0:	0e 94 44 00 	call	0x88	; 0x88 <Bluetooth_Receive>
		
		switch(messageID)
 3d4:	84 33       	cpi	r24, 0x34	; 52
 3d6:	e1 f1       	breq	.+120    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3d8:	28 f4       	brcc	.+10     	; 0x3e4 <main+0x3a>
 3da:	81 33       	cpi	r24, 0x31	; 49
 3dc:	69 f0       	breq	.+26     	; 0x3f8 <main+0x4e>
 3de:	82 33       	cpi	r24, 0x32	; 50
 3e0:	09 f1       	breq	.+66     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3e2:	8e c0       	rjmp	.+284    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 3e4:	87 33       	cpi	r24, 0x37	; 55
 3e6:	09 f4       	brne	.+2      	; 0x3ea <main+0x40>
 3e8:	5f c0       	rjmp	.+190    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 3ea:	88 33       	cpi	r24, 0x38	; 56
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <main+0x46>
 3ee:	72 c0       	rjmp	.+228    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 3f0:	85 33       	cpi	r24, 0x35	; 53
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <main+0x4c>
 3f4:	85 c0       	rjmp	.+266    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 3f6:	42 c0       	rjmp	.+132    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		{
			case LED_TURN_ON:
			SPI_Transfer(LED_TURN_ON);
 3f8:	81 e3       	ldi	r24, 0x31	; 49
 3fa:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_Transfer>
			LCD_Clear();
 3fe:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"You Pressed  '1'");
 40a:	84 e0       	ldi	r24, 0x04	; 4
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"  LED_TURN_ON  ");
 41a:	85 e1       	ldi	r24, 0x15	; 21
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 422:	d6 cf       	rjmp	.-84     	; 0x3d0 <main+0x26>
			
			case LED_TURN_OFF:
			SPI_Transfer(LED_TURN_OFF);
 424:	82 e3       	ldi	r24, 0x32	; 50
 426:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_Transfer>
			LCD_Clear();
 42a:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"You Pressed  '2'");
 436:	85 e2       	ldi	r24, 0x25	; 37
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"  LED_TURN_OFF ");
 446:	86 e3       	ldi	r24, 0x36	; 54
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 44e:	c0 cf       	rjmp	.-128    	; 0x3d0 <main+0x26>
			
			case TV_TURN_ON:
			SPI_Transfer(TV_TURN_ON);
 450:	84 e3       	ldi	r24, 0x34	; 52
 452:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_Transfer>
			LCD_Clear();
 456:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"You Pressed  '4'");
 462:	86 e4       	ldi	r24, 0x46	; 70
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"  TV_TURN_ON  ");
 472:	87 e5       	ldi	r24, 0x57	; 87
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 47a:	aa cf       	rjmp	.-172    	; 0x3d0 <main+0x26>
			
			case TV_TURN_OFF:
			SPI_Transfer(TV_TURN_OFF);
 47c:	85 e3       	ldi	r24, 0x35	; 53
 47e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_Transfer>
			LCD_Clear();
 482:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"You Pressed  '5'");
 48e:	86 e6       	ldi	r24, 0x66	; 102
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"  TV_TURN_OFF  ");
 49e:	87 e7       	ldi	r24, 0x77	; 119
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 4a6:	94 cf       	rjmp	.-216    	; 0x3d0 <main+0x26>
			
			case DOOR_OPEN:
			SPI_Transfer(DOOR_OPEN);
 4a8:	87 e3       	ldi	r24, 0x37	; 55
 4aa:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_Transfer>
			LCD_Clear();
 4ae:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"You Pressed  '7'");
 4ba:	87 e8       	ldi	r24, 0x87	; 135
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"   DOOR_OPEN   ");
 4ca:	88 e9       	ldi	r24, 0x98	; 152
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 4d2:	7e cf       	rjmp	.-260    	; 0x3d0 <main+0x26>
			
			case DOOR_CLOSE:
			SPI_Transfer(DOOR_CLOSE);
 4d4:	88 e3       	ldi	r24, 0x38	; 56
 4d6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_Transfer>
			LCD_Clear();
 4da:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"You Pressed  '8'");
 4e6:	88 ea       	ldi	r24, 0xA8	; 168
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"   DOOR_CLOSE  ");
 4f6:	89 eb       	ldi	r24, 0xB9	; 185
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 4fe:	68 cf       	rjmp	.-304    	; 0x3d0 <main+0x26>
			
			default:
			LCD_Clear();
 500:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear>
			LCD_GoTo(0,0);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)"  You Pressed  ");
 50c:	89 ec       	ldi	r24, 0xC9	; 201
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			LCD_GoTo(1,0);
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 19 01 	call	0x232	; 0x232 <LCD_GoTo>
			LCD_WriteString((uint8*)" Wrong  Choice ");
 51c:	89 ed       	ldi	r24, 0xD9	; 217
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_WriteString>
			break;
 524:	55 cf       	rjmp	.-342    	; 0x3d0 <main+0x26>

00000526 <DIO_SetPinDir>:
	switch(Port)
	{
		case PortA : PORTA = Val ; break;
		case PortB : PORTB = Val ; break;
		case PortC : PORTC = Val ; break;
		case PortD : PORTD = Val ; break;
 526:	44 23       	and	r20, r20
 528:	19 f0       	breq	.+6      	; 0x530 <DIO_SetPinDir+0xa>
 52a:	41 30       	cpi	r20, 0x01	; 1
 52c:	c9 f1       	breq	.+114    	; 0x5a0 <DIO_SetPinDir+0x7a>
 52e:	08 95       	ret
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	91 f0       	breq	.+36     	; 0x558 <DIO_SetPinDir+0x32>
 534:	28 f0       	brcs	.+10     	; 0x540 <DIO_SetPinDir+0x1a>
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	d9 f0       	breq	.+54     	; 0x570 <DIO_SetPinDir+0x4a>
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	29 f1       	breq	.+74     	; 0x588 <DIO_SetPinDir+0x62>
 53e:	08 95       	ret
 540:	2a b3       	in	r18, 0x1a	; 26
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_SetPinDir+0x26>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_SetPinDir+0x22>
 550:	80 95       	com	r24
 552:	82 23       	and	r24, r18
 554:	8a bb       	out	0x1a, r24	; 26
 556:	08 95       	ret
 558:	27 b3       	in	r18, 0x17	; 23
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_SetPinDir+0x3e>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_SetPinDir+0x3a>
 568:	80 95       	com	r24
 56a:	82 23       	and	r24, r18
 56c:	87 bb       	out	0x17, r24	; 23
 56e:	08 95       	ret
 570:	24 b3       	in	r18, 0x14	; 20
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_SetPinDir+0x56>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_SetPinDir+0x52>
 580:	80 95       	com	r24
 582:	82 23       	and	r24, r18
 584:	84 bb       	out	0x14, r24	; 20
 586:	08 95       	ret
 588:	21 b3       	in	r18, 0x11	; 17
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_SetPinDir+0x6e>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_SetPinDir+0x6a>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	81 bb       	out	0x11, r24	; 17
 59e:	08 95       	ret
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	89 f0       	breq	.+34     	; 0x5c6 <DIO_SetPinDir+0xa0>
 5a4:	28 f0       	brcs	.+10     	; 0x5b0 <DIO_SetPinDir+0x8a>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	c9 f0       	breq	.+50     	; 0x5dc <DIO_SetPinDir+0xb6>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	11 f1       	breq	.+68     	; 0x5f2 <DIO_SetPinDir+0xcc>
 5ae:	08 95       	ret
 5b0:	2a b3       	in	r18, 0x1a	; 26
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_SetPinDir+0x96>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_SetPinDir+0x92>
 5c0:	82 2b       	or	r24, r18
 5c2:	8a bb       	out	0x1a, r24	; 26
 5c4:	08 95       	ret
 5c6:	27 b3       	in	r18, 0x17	; 23
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_SetPinDir+0xac>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_SetPinDir+0xa8>
 5d6:	82 2b       	or	r24, r18
 5d8:	87 bb       	out	0x17, r24	; 23
 5da:	08 95       	ret
 5dc:	24 b3       	in	r18, 0x14	; 20
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_SetPinDir+0xc2>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_SetPinDir+0xbe>
 5ec:	82 2b       	or	r24, r18
 5ee:	84 bb       	out	0x14, r24	; 20
 5f0:	08 95       	ret
 5f2:	21 b3       	in	r18, 0x11	; 17
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_SetPinDir+0xd8>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_SetPinDir+0xd4>
 602:	82 2b       	or	r24, r18
 604:	81 bb       	out	0x11, r24	; 17
 606:	08 95       	ret

00000608 <DIO_SetPinValue>:
}


void DIO_SetPinValue(Port_Id Port ,Pin_Id Pin , Pin_Level Val)
{
	switch (Val)
 608:	44 23       	and	r20, r20
 60a:	19 f0       	breq	.+6      	; 0x612 <DIO_SetPinValue+0xa>
 60c:	41 30       	cpi	r20, 0x01	; 1
 60e:	c9 f1       	breq	.+114    	; 0x682 <DIO_SetPinValue+0x7a>
 610:	08 95       	ret
	{
		
		case DIO_PIN_LOW :
		
		switch(Port)
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	91 f0       	breq	.+36     	; 0x63a <DIO_SetPinValue+0x32>
 616:	28 f0       	brcs	.+10     	; 0x622 <DIO_SetPinValue+0x1a>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	d9 f0       	breq	.+54     	; 0x652 <DIO_SetPinValue+0x4a>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	29 f1       	breq	.+74     	; 0x66a <DIO_SetPinValue+0x62>
 620:	08 95       	ret
		{
			case PortA : CLR_BIT(PORTA, Pin); break;
 622:	2b b3       	in	r18, 0x1b	; 27
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_SetPinValue+0x26>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_SetPinValue+0x22>
 632:	80 95       	com	r24
 634:	82 23       	and	r24, r18
 636:	8b bb       	out	0x1b, r24	; 27
 638:	08 95       	ret
			case PortB : CLR_BIT(PORTB, Pin); break;
 63a:	28 b3       	in	r18, 0x18	; 24
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_SetPinValue+0x3e>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_SetPinValue+0x3a>
 64a:	80 95       	com	r24
 64c:	82 23       	and	r24, r18
 64e:	88 bb       	out	0x18, r24	; 24
 650:	08 95       	ret
			case PortC : CLR_BIT(PORTC, Pin); break;
 652:	25 b3       	in	r18, 0x15	; 21
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_SetPinValue+0x56>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_SetPinValue+0x52>
 662:	80 95       	com	r24
 664:	82 23       	and	r24, r18
 666:	85 bb       	out	0x15, r24	; 21
 668:	08 95       	ret
			case PortD : CLR_BIT(PORTD, Pin); break;
 66a:	22 b3       	in	r18, 0x12	; 18
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SetPinValue+0x6e>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SetPinValue+0x6a>
 67a:	80 95       	com	r24
 67c:	82 23       	and	r24, r18
 67e:	82 bb       	out	0x12, r24	; 18
 680:	08 95       	ret
		break;
		
		
		case DIO_PIN_HIGH :
		
		switch(Port)
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	89 f0       	breq	.+34     	; 0x6a8 <DIO_SetPinValue+0xa0>
 686:	28 f0       	brcs	.+10     	; 0x692 <DIO_SetPinValue+0x8a>
 688:	82 30       	cpi	r24, 0x02	; 2
 68a:	c9 f0       	breq	.+50     	; 0x6be <DIO_SetPinValue+0xb6>
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	11 f1       	breq	.+68     	; 0x6d4 <DIO_SetPinValue+0xcc>
 690:	08 95       	ret
		{
			case PortA : SET_BIT(PORTA, Pin); break;
 692:	2b b3       	in	r18, 0x1b	; 27
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_SetPinValue+0x96>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_SetPinValue+0x92>
 6a2:	82 2b       	or	r24, r18
 6a4:	8b bb       	out	0x1b, r24	; 27
 6a6:	08 95       	ret
			case PortB : SET_BIT(PORTB, Pin); break;
 6a8:	28 b3       	in	r18, 0x18	; 24
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SetPinValue+0xac>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_SetPinValue+0xa8>
 6b8:	82 2b       	or	r24, r18
 6ba:	88 bb       	out	0x18, r24	; 24
 6bc:	08 95       	ret
			case PortC : SET_BIT(PORTC, Pin); break;
 6be:	25 b3       	in	r18, 0x15	; 21
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_SetPinValue+0xc2>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_SetPinValue+0xbe>
 6ce:	82 2b       	or	r24, r18
 6d0:	85 bb       	out	0x15, r24	; 21
 6d2:	08 95       	ret
			case PortD : SET_BIT(PORTD, Pin); break;
 6d4:	22 b3       	in	r18, 0x12	; 18
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_SetPinValue+0xd8>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_SetPinValue+0xd4>
 6e4:	82 2b       	or	r24, r18
 6e6:	82 bb       	out	0x12, r24	; 18
 6e8:	08 95       	ret

000006ea <SPI_Master_Init>:
 6ea:	87 b3       	in	r24, 0x17	; 23
 6ec:	80 6b       	ori	r24, 0xB0	; 176
 6ee:	87 bb       	out	0x17, r24	; 23
 6f0:	be 98       	cbi	0x17, 6	; 23
 6f2:	c4 9a       	sbi	0x18, 4	; 24
 6f4:	83 e5       	ldi	r24, 0x53	; 83
 6f6:	8d b9       	out	0x0d, r24	; 13
 6f8:	70 98       	cbi	0x0e, 0	; 14
 6fa:	08 95       	ret

000006fc <SPI_Transfer>:
 6fc:	8f b9       	out	0x0f, r24	; 15
 6fe:	77 9b       	sbis	0x0e, 7	; 14
 700:	fe cf       	rjmp	.-4      	; 0x6fe <SPI_Transfer+0x2>
 702:	8f b1       	in	r24, 0x0f	; 15
 704:	08 95       	ret

00000706 <SPI_InitTrans>:
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	64 e0       	ldi	r22, 0x04	; 4
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SetPinValue>
 710:	08 95       	ret

00000712 <UART_Init>:
	while(str[i] != '\0')
	{
		UART_SendByte(str[i]);
		i++;
	}
}
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	61 e0       	ldi	r22, 0x01	; 1
 720:	83 e0       	ldi	r24, 0x03	; 3
 722:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SetPinDir>
 726:	8a b1       	in	r24, 0x0a	; 10
 728:	88 61       	ori	r24, 0x18	; 24
 72a:	8a b9       	out	0x0a, r24	; 10
 72c:	80 b5       	in	r24, 0x20	; 32
 72e:	86 68       	ori	r24, 0x86	; 134
 730:	80 bd       	out	0x20, r24	; 32
 732:	83 e3       	ldi	r24, 0x33	; 51
 734:	89 b9       	out	0x09, r24	; 9
 736:	10 bc       	out	0x20, r1	; 32
 738:	08 95       	ret

0000073a <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
	uint8 Uart_Rx = 0;
	
	while ( !(UCSRA & (1 << RXC)) );    // Wait until data is received
 73a:	5f 9b       	sbis	0x0b, 7	; 11
 73c:	fe cf       	rjmp	.-4      	; 0x73a <UART_ReceiveByte>
	
	 Uart_Rx = UDR ;     // Read the data from the RX buffer	
 73e:	8c b1       	in	r24, 0x0c	; 12
	
	return  Uart_Rx ;
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
