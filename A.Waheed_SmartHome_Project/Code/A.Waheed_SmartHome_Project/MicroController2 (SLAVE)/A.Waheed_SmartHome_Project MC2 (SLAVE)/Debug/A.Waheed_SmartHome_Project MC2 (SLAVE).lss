
A.Waheed_SmartHome_Project MC2 (SLAVE).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f52  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000876  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080b  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000637  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000416  00000000  00000000  00002d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  8a:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_init>:
#include "LED.h"
#include "../../LIB/Bit_Math.h"

void LED_init(void)
{
	DIO_SetPinDir(LED_PORT , LED_PIN , DIO_PIN_OUTPUT);        //set LED pin as output
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDir>
	DIO_SetPinDir(TV_PORT , TV_PIN , DIO_PIN_OUTPUT);        //set TV pin as output
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDir>
  a6:	08 95       	ret

000000a8 <LED_On>:
}

void LED_On(void)
{
	DIO_SetPinValue(LED_PORT, LED_PIN , DIO_PIN_HIGH);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_SetPinValue>
  b2:	08 95       	ret

000000b4 <LED_Off>:
}
void LED_Off(void)
{
	DIO_SetPinValue(LED_PORT, LED_PIN , DIO_PIN_LOW);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_SetPinValue>
  be:	08 95       	ret

000000c0 <TV_On>:
}

void TV_On(void)
{
	DIO_SetPinValue(TV_PORT, TV_PIN , DIO_PIN_HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_SetPinValue>
  ca:	08 95       	ret

000000cc <TV_Off>:
}
void TV_Off(void)
{
	DIO_SetPinValue(TV_PORT, TV_PIN , DIO_PIN_LOW);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_SetPinValue>
  d6:	08 95       	ret

000000d8 <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	static uint8 open_door_flag = 0;
	static uint8 closed_door_flag = 0;
	
	//Open the door
	//Servo go to 0 degree
	if(door_status == DOOR_CLOSED)
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	99 f4       	brne	.+38     	; 0x114 <__vector_7+0x3c>
	{
		if(open_door_flag)
  ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <open_door_flag.1674>
  f2:	88 23       	and	r24, r24
  f4:	39 f0       	breq	.+14     	; 0x104 <__vector_7+0x2c>
		{
			open_door_flag = 0;
  f6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <open_door_flag.1674>
			OCR1A = NO_TICKS_MS(19);
  fa:	87 e3       	ldi	r24, 0x37	; 55
  fc:	9a e4       	ldi	r25, 0x4A	; 74
  fe:	9b bd       	out	0x2b, r25	; 43
 100:	8a bd       	out	0x2a, r24	; 42
 102:	1c c0       	rjmp	.+56     	; 0x13c <__vector_7+0x64>
		}
		else
		{
			open_door_flag = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <open_door_flag.1674>
			OCR1A = NO_TICKS_MS(1);
 10a:	87 ee       	ldi	r24, 0xE7	; 231
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	9b bd       	out	0x2b, r25	; 43
 110:	8a bd       	out	0x2a, r24	; 42
 112:	14 c0       	rjmp	.+40     	; 0x13c <__vector_7+0x64>
		}
	}
	
	//Close the door
	//Servo go to 90 degree
	else if(door_status == DOOR_OPENED)
 114:	81 11       	cpse	r24, r1
 116:	12 c0       	rjmp	.+36     	; 0x13c <__vector_7+0x64>
	{
		if(closed_door_flag)
 118:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 11c:	88 23       	and	r24, r24
 11e:	39 f0       	breq	.+14     	; 0x12e <__vector_7+0x56>
		{
			closed_door_flag = 0;
 120:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			OCR1A = NO_TICKS_MS(18.5);
 124:	83 e4       	ldi	r24, 0x43	; 67
 126:	98 e4       	ldi	r25, 0x48	; 72
 128:	9b bd       	out	0x2b, r25	; 43
 12a:	8a bd       	out	0x2a, r24	; 42
 12c:	07 c0       	rjmp	.+14     	; 0x13c <__vector_7+0x64>
		}
		else
		{
			closed_door_flag = 1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			OCR1A = NO_TICKS_MS(1.5);
 134:	8b ed       	ldi	r24, 0xDB	; 219
 136:	95 e0       	ldi	r25, 0x05	; 5
 138:	9b bd       	out	0x2b, r25	; 43
 13a:	8a bd       	out	0x2a, r24	; 42
		}
	}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <main>:

extern uint8 door_status;

int main(void)
{
	SPI_Slave_Init();
 14a:	0e 94 b0 01 	call	0x360	; 0x360 <SPI_Slave_Init>
	LED_init();
 14e:	0e 94 49 00 	call	0x92	; 0x92 <LED_init>
			case DOOR_OPEN:
			door_status = DOOR_OPENED;
			break;
			
			case DOOR_CLOSE:
			door_status = DOOR_CLOSED;
 152:	c1 e0       	ldi	r28, 0x01	; 1
	uint8 messageID;
	uint8 Rx =0 ;

	while (1)
	{
		messageID = SPI_Transfer(Rx);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 b7 01 	call	0x36e	; 0x36e <SPI_Transfer>
		
		switch(messageID)
 15a:	84 33       	cpi	r24, 0x34	; 52
 15c:	99 f0       	breq	.+38     	; 0x184 <main+0x3a>
 15e:	28 f4       	brcc	.+10     	; 0x16a <main+0x20>
 160:	81 33       	cpi	r24, 0x31	; 49
 162:	51 f0       	breq	.+20     	; 0x178 <main+0x2e>
 164:	82 33       	cpi	r24, 0x32	; 50
 166:	59 f0       	breq	.+22     	; 0x17e <main+0x34>
 168:	f5 cf       	rjmp	.-22     	; 0x154 <main+0xa>
 16a:	87 33       	cpi	r24, 0x37	; 55
 16c:	89 f0       	breq	.+34     	; 0x190 <main+0x46>
 16e:	88 33       	cpi	r24, 0x38	; 56
 170:	91 f0       	breq	.+36     	; 0x196 <main+0x4c>
 172:	85 33       	cpi	r24, 0x35	; 53
 174:	79 f7       	brne	.-34     	; 0x154 <main+0xa>
 176:	09 c0       	rjmp	.+18     	; 0x18a <main+0x40>
		{
			case LED_TURN_ON:
			LED_On();
 178:	0e 94 54 00 	call	0xa8	; 0xa8 <LED_On>
			break;
 17c:	eb cf       	rjmp	.-42     	; 0x154 <main+0xa>
			
			case  LED_TURN_OFF:
			LED_Off();
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LED_Off>
			break;
 182:	e8 cf       	rjmp	.-48     	; 0x154 <main+0xa>
			
			case  TV_TURN_ON:
			TV_On();
 184:	0e 94 60 00 	call	0xc0	; 0xc0 <TV_On>
			break;
 188:	e5 cf       	rjmp	.-54     	; 0x154 <main+0xa>
			
			case  TV_TURN_OFF:
			TV_Off();
 18a:	0e 94 66 00 	call	0xcc	; 0xcc <TV_Off>
			break;
 18e:	e2 cf       	rjmp	.-60     	; 0x154 <main+0xa>
			
			case DOOR_OPEN:
			door_status = DOOR_OPENED;
 190:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 194:	df cf       	rjmp	.-66     	; 0x154 <main+0xa>
			
			case DOOR_CLOSE:
			door_status = DOOR_CLOSED;
 196:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 19a:	dc cf       	rjmp	.-72     	; 0x154 <main+0xa>

0000019c <DIO_SetPinDir>:
	switch(Port)
	{
		case PortA : PORTA = Val ; break;
		case PortB : PORTB = Val ; break;
		case PortC : PORTC = Val ; break;
		case PortD : PORTD = Val ; break;
 19c:	44 23       	and	r20, r20
 19e:	19 f0       	breq	.+6      	; 0x1a6 <DIO_SetPinDir+0xa>
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	c9 f1       	breq	.+114    	; 0x216 <DIO_SetPinDir+0x7a>
 1a4:	08 95       	ret
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 f0       	breq	.+36     	; 0x1ce <DIO_SetPinDir+0x32>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_SetPinDir+0x1a>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d9 f0       	breq	.+54     	; 0x1e6 <DIO_SetPinDir+0x4a>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	29 f1       	breq	.+74     	; 0x1fe <DIO_SetPinDir+0x62>
 1b4:	08 95       	ret
 1b6:	2a b3       	in	r18, 0x1a	; 26
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDir+0x26>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDir+0x22>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8a bb       	out	0x1a, r24	; 26
 1cc:	08 95       	ret
 1ce:	27 b3       	in	r18, 0x17	; 23
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_SetPinDir+0x3e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_SetPinDir+0x3a>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	87 bb       	out	0x17, r24	; 23
 1e4:	08 95       	ret
 1e6:	24 b3       	in	r18, 0x14	; 20
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinDir+0x56>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinDir+0x52>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	84 bb       	out	0x14, r24	; 20
 1fc:	08 95       	ret
 1fe:	21 b3       	in	r18, 0x11	; 17
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinDir+0x6e>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinDir+0x6a>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	81 bb       	out	0x11, r24	; 17
 214:	08 95       	ret
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	89 f0       	breq	.+34     	; 0x23c <DIO_SetPinDir+0xa0>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_SetPinDir+0x8a>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	c9 f0       	breq	.+50     	; 0x252 <DIO_SetPinDir+0xb6>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	11 f1       	breq	.+68     	; 0x268 <DIO_SetPinDir+0xcc>
 224:	08 95       	ret
 226:	2a b3       	in	r18, 0x1a	; 26
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinDir+0x96>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinDir+0x92>
 236:	82 2b       	or	r24, r18
 238:	8a bb       	out	0x1a, r24	; 26
 23a:	08 95       	ret
 23c:	27 b3       	in	r18, 0x17	; 23
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPinDir+0xac>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPinDir+0xa8>
 24c:	82 2b       	or	r24, r18
 24e:	87 bb       	out	0x17, r24	; 23
 250:	08 95       	ret
 252:	24 b3       	in	r18, 0x14	; 20
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDir+0xc2>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDir+0xbe>
 262:	82 2b       	or	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
 268:	21 b3       	in	r18, 0x11	; 17
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDir+0xd8>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDir+0xd4>
 278:	82 2b       	or	r24, r18
 27a:	81 bb       	out	0x11, r24	; 17
 27c:	08 95       	ret

0000027e <DIO_SetPinValue>:
}


void DIO_SetPinValue(Port_Id Port ,Pin_Id Pin , Pin_Level Val)
{
	switch (Val)
 27e:	44 23       	and	r20, r20
 280:	19 f0       	breq	.+6      	; 0x288 <DIO_SetPinValue+0xa>
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	c9 f1       	breq	.+114    	; 0x2f8 <DIO_SetPinValue+0x7a>
 286:	08 95       	ret
	{
		
		case DIO_PIN_LOW :
		
		switch(Port)
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	91 f0       	breq	.+36     	; 0x2b0 <DIO_SetPinValue+0x32>
 28c:	28 f0       	brcs	.+10     	; 0x298 <DIO_SetPinValue+0x1a>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	d9 f0       	breq	.+54     	; 0x2c8 <DIO_SetPinValue+0x4a>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	29 f1       	breq	.+74     	; 0x2e0 <DIO_SetPinValue+0x62>
 296:	08 95       	ret
		{
			case PortA : CLR_BIT(PORTA, Pin); break;
 298:	2b b3       	in	r18, 0x1b	; 27
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPinValue+0x26>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPinValue+0x22>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	8b bb       	out	0x1b, r24	; 27
 2ae:	08 95       	ret
			case PortB : CLR_BIT(PORTB, Pin); break;
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinValue+0x3e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinValue+0x3a>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	88 bb       	out	0x18, r24	; 24
 2c6:	08 95       	ret
			case PortC : CLR_BIT(PORTC, Pin); break;
 2c8:	25 b3       	in	r18, 0x15	; 21
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPinValue+0x56>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPinValue+0x52>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	85 bb       	out	0x15, r24	; 21
 2de:	08 95       	ret
			case PortD : CLR_BIT(PORTD, Pin); break;
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_SetPinValue+0x6e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_SetPinValue+0x6a>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	82 bb       	out	0x12, r24	; 18
 2f6:	08 95       	ret
		break;
		
		
		case DIO_PIN_HIGH :
		
		switch(Port)
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	89 f0       	breq	.+34     	; 0x31e <DIO_SetPinValue+0xa0>
 2fc:	28 f0       	brcs	.+10     	; 0x308 <DIO_SetPinValue+0x8a>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	c9 f0       	breq	.+50     	; 0x334 <DIO_SetPinValue+0xb6>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	11 f1       	breq	.+68     	; 0x34a <DIO_SetPinValue+0xcc>
 306:	08 95       	ret
		{
			case PortA : SET_BIT(PORTA, Pin); break;
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_SetPinValue+0x96>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_SetPinValue+0x92>
 318:	82 2b       	or	r24, r18
 31a:	8b bb       	out	0x1b, r24	; 27
 31c:	08 95       	ret
			case PortB : SET_BIT(PORTB, Pin); break;
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPinValue+0xac>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPinValue+0xa8>
 32e:	82 2b       	or	r24, r18
 330:	88 bb       	out	0x18, r24	; 24
 332:	08 95       	ret
			case PortC : SET_BIT(PORTC, Pin); break;
 334:	25 b3       	in	r18, 0x15	; 21
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPinValue+0xc2>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPinValue+0xbe>
 344:	82 2b       	or	r24, r18
 346:	85 bb       	out	0x15, r24	; 21
 348:	08 95       	ret
			case PortD : SET_BIT(PORTD, Pin); break;
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_SetPinValue+0xd8>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_SetPinValue+0xd4>
 35a:	82 2b       	or	r24, r18
 35c:	82 bb       	out	0x12, r24	; 18
 35e:	08 95       	ret

00000360 <SPI_Slave_Init>:
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
}

void SPI_Slave_Init()									/* SPI Initialize function */
{
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SS));		/* Make MOSI, SCK, SS pin direction as input pins */
 360:	87 b3       	in	r24, 0x17	; 23
 362:	8f 74       	andi	r24, 0x4F	; 79
 364:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<MISO);							/* Make MISO pin as output pin */
 366:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1<<SPE);							/* Enable SPI in slave mode */
 368:	80 e4       	ldi	r24, 0x40	; 64
 36a:	8d b9       	out	0x0d, r24	; 13
 36c:	08 95       	ret

0000036e <SPI_Transfer>:
}

uint8 SPI_Transfer(uint8 Tx_Data)
{
	uint8  Rx_Data = 0 ;
	SPDR = Tx_Data ;						/* Write data to SPI data register */
 36e:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
 370:	77 9b       	sbis	0x0e, 7	; 14
 372:	fe cf       	rjmp	.-4      	; 0x370 <SPI_Transfer+0x2>
	Rx_Data = SPDR;							/* Flush received data */
 374:	8f b1       	in	r24, 0x0f	; 15

	return Rx_Data ;
}
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
